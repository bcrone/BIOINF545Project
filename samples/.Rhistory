if (same_S == 0){
return(0)
} else{
return(same_G/same_S)
}
}
# appendix A of stephens paper
forward_A <- function(i,j,l,p,G,S,Q,A,C,T){
# print(paste("forward improved",i,j,l))
if (l == 1){
return(Q[i,1] * Q[j,1])
} else{
# probability of no transition times probability of k1,k2 at the previous location
inner_sum = T[l]  * forward_A(i,j,l-1,p,G,S,Q,A,C,T)
# probability of a transition times probability of transition of one haplotype to current state
sum_one <- 0
sum_two <- 0
for (k_prime in 1:C){
sum_one = sum_one + forward_A(k_prime,j,l-1,p,G,S,Q,A,C,T)
sum_two = sum_two + forward_A(k_prime,i,l-1,p,G,S,Q,A,C,T)
}
inner_sum = inner_sum + (1-T[l])/2 * (Q[i,l] * sum_one + Q[j,l] * sum_two)
double_sum <- 0
for (k_1 in 1:C){
for (k_2 in 1:C){
double_sum = double_sum + forward_A(k_1,k_2,l-1,p,G,S,Q,A,C,T)
}
}
inner_sum = inner_sum + (1-T[l]) * Q[i,l] * Q[j,l] * double_sum
return(P_G(p,l,i,j,G,S,A) * inner_sum)
}
}
# pg 46 of sun thesis
# update S by summing over possible values of A
forward_S <- function(i,j,l,p,G,S,Q,A,C,T){
if (l == 1){
# at locus 1, return just P_G (since we don't have any previous-locus info)
return(P_G(p,l,i,j,G,S,A))
} else{
R = 0
for (x in 1:C){
for (y in 1:C){
# the probability of S_(l,p) = i,j | S_(l-1,p) = x,y) * recursion starting at prev locus
# the probability of S_l,p | S_(l-1,p) is the probability of the two states * prob of transition/no transition
if (i==x & j==y){
R = R + (Q[i,l] * Q[j,l] * Q[x,l-1] * Q[y,l-1] * (T[l-1])) * forward_S(x,y,l-1,p,G,S,Q,A,C,T)
} else{
R = R + (Q[i,l] * Q[j,l] * Q[x,l-1] * Q[y,l-1] * (1-T[l-1]))* forward_S(x,y,l-1,p,G,S,Q,A,C,T)
}
}
}
return (P_G(p,l,i,j,G,S,A) * R)
}
}
backward_A <- function(i,j,l,p,G,S,Q,A,C,T){
# print(paste("backward improved",i,j,l))
if (l == dim(G)[2]){
return (1)
} else{
# probability of no transition times probability of k1,k2 at the previous location
inner_sum = T[l]  * backward_A(i,j,l+1,p,G,S,Q,A,C,T)
# probability of a transition times probability of transition of one haplotype to current state
sum_one <- 0
sum_two <- 0
for (k_prime in 1:C){
sum_one = sum_one + backward_A(k_prime,j,l+1,p,G,S,Q,A,C,T)
sum_two = sum_two + backward_A(k_prime,i,l+1,p,G,S,Q,A,C,T)
}
inner_sum = inner_sum + (1-T[l])/2 * (Q[i,l+1] * sum_one + Q[j,l+1] * sum_two)
double_sum <- 0
for (k_1 in 1:C){
for (k_2 in 1:C){
double_sum = double_sum + backward_A(k_1,k_2,l+1,p,G,S,Q,A,C,T)
}
}
inner_sum = inner_sum + (1-T[l]) * Q[i,l+1] * Q[j,l+1] * double_sum
return(P_G(p,l,i,j,G,S,A) * inner_sum)
}
}
# page 47 of sun thesis
backward_S <- function(i,j,l,p,G,S,Q,A,C,T){
if (l == dim(G)[2]){
return(P_G(p,l,i,j,G,S,A))
}
R <- 0
for (x in 1:C){
for (y in 1:C){
# in the thesis he has backward(i,j) but I think it's supposed to be x,y because i,j doesn't make sense
if (i==x & j==y){
R = R + (Q[i,l] * Q[j,l] * (T[l])) * backward_S(x,y,l+1,p,G,S,Q,A,C,T)
} else{
R = R + (Q[i,l] * Q[j,l] * (1-T[l])) * backward_S(x,y,l+1,p,G,S,Q,A,C,T)
}
}
}
return(R)
}
# calculates the probability of all possible haplotypes at a location
# equivalent to equation 12 from sun et al paper (but using efficiency from stephens paper)
prob_haplotype <- function(l,p,G,S,Q,A,C,T){
prob = matrix(nrow=C, ncol=C)
for (k_1 in 1:C){
for (k_2 in 1:C){
pr = forward_A(k_1,k_2,l,p,G,S,Q,A,C,T) * 2^(k_1 != k_2) * backward_A(k_1,k_2,l,p,G,S,Q,A,C,T)
prob[k_1,k_2] = pr
}
}
prob = prob/norm(prob)
return(prob)
}
# use prob_haplotype to assign values of H matrix
assignH <- function(G,S,Q,A,C,T){
H <- matrix(nrow=nrow(G), ncol=ncol(G))
# iterate over people
for (p in 1:(nrow(G)/2)){
# iterate over loci
for (l in 1:(ncol(G))){
# print(paste(p,l))
# get the probability of a given genotype assignment
probs <- prob_haplotype(l=l,p=p, G=G, S=S, Q=Q, A=A, C=dim(d)[1], T=T)
# find the pair of haplotype assignments with the highest probability
max <- which(probs == max(probs), arr.ind = TRUE)
# put those assignments in H
H[2*p-1,l] <- max[1]
H[2*p,l] <- max[2]
}
}
return(H)
}
countHapByLocus <- function(H,C,L){
CA <- matrix(0, nrow=C, ncol=L)
for (i in 1:L){
v <- aggregate(data.frame(count = H[,i]), list(hap = H[,i]), length)
CA[v$hap,i] <- v$count
}
return(CA)
}
countAlleleByLocus <- function(G){
return(rbind(colSums(G), (dim(G)[1]-colSums(G))))
}
countHapByLocus <- function(H,C,L){
CA <- matrix(0, nrow=C, ncol=L)
for (i in 1:L){
v <- aggregate(data.frame(count = H[,i]), list(hap = H[,i]), length)
CA[v$hap,i] <- v$count
}
return(CA)
}
# check for convergence in MCMC
matrix_converged <- function(old, new){
return(all(old==new))
}
accuracy <- function(H,G,A){
correct <- 0
for (p in 1:nrow(G)){
for (l in 1:ncol(G)){
hap <- H[p,l]
if (G[p,l] == A[hap,l]){
correct = correct+1
}
}
}
return(correct /(nrow(G) * ncol(G)))
}
data("ACEdata")
x <- haplodata(ACEdata)
y <- haplosim(4, x, which.snp=c(seq(1,4)), seed=5)
# generate genotypes/allele frequencies
d <- matrix(y$data, nrow=dim(y$data)[1], ncol=dim(y$data)[2])
# Pairs of chromosome copies (individual i: genotypes[i,]/genotypes[i+1,])
genotypes <- generateGenotypes(d,10)
# Initial variables
A <- initA(dim(d)[1],dim(d)[2],1,1)
PA <- initPA(A)
Q <- t(initQ(dim(d)[1],dim(d)[2]))
T <- initT(dim(d)[2],1,1)
S <- initS(dim(d)[1],dim(d)[2],dim(genotypes)[1],Q,T)
C <- dim(d)[2]
L <- dim(genotypes)[2]
# Get H
# H <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H <- S
# Monte Carlo stuff
max_iter = 100
for (iter in 1:max_iter){
print(paste("iteration number",iter))
# Collapse haplotype count by locus
CA <- countHapByLocus(H,4,4)
GA <- countAlleleByLocus(genotypes)
# re-sample T and Q
T <- gibbs_T(4,T,1,1)
Q <- gibbs_Q(4,4,CA)
# update PA (equation 3.5 from thesis)
PA <- updatePA(genotypes,A,L,C,GA)
# sample A (using 4.5 from thesis)
A <- gibbs_A(C,L,1,1,PA,genotypes,S,A)
S_prime <- matrix(NA, nrow=dim(S)[1], ncol=dim(S)[2])
# sample S
for (p in 1:(dim(genotypes)[1]/2)){
for (l in 1:dim(genotypes)[2]){
p_vals <- matrix(nrow=0,ncol=3)
for (i in 1:C){
for (j in 1:C){
forward_prob = forward_S(i,j,l,p,genotypes,S,Q,A,C,T)
P_G_prob = P_G(p,l,i,j,genotypes,S,A)
backward_prob = backward_S(i,j,l,p,genotypes,S,Q,A,C,T)
# print(paste(forward_prob, P_G_prob, backward_prob))
p_vals <- rbind(p_vals, c(i,j, forward_prob * P_G_prob * backward_prob))
}
}
best_fit <- p_vals[which(p_vals[,3] == max(p_vals[,3])),]
S_prime[2*p-1, l] <- best_fit[1]
S_prime[2*p, l] <- best_fit[2]
}
}
S <- S_prime
# assign H' based on new values
# H_prime <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H_prime <- S
# if H' and H are the same, then the algorithm has converged
accuracy_p <- accuracy(H,genotypes,A)
print(accuracy_p)
if (matrix_converged(H_prime, H) & accuracy_p > 0.9){
H = H_prime
# print(iter)
break
}
H <- H_prime
}
initQ <- function(M,C,x=1,seed=5){
# Dirichlet(1,...,1) (length M)
# Sample for C ancesteral haplotypes
set.seed(seed)
return(rdirichlet(C,rep(1/C,M)))
}
# Gibbs update for Q
gibbs_Q <- function(M,C,CA,x=1,seed=5){
set.seed(seed)
Q <- matrix(NA,nrow=C,ncol=M)
for (i in 1:C){
Q[i,] <- rdirichlet(1,(1/C)+CA[i,])
}
return(Q)
}
P_G <- function(p,l,u,v,G,S,A){
# get the genotypes at the locus for the person of interest
g1 <- G[2*p-1, l]
g2 <- G[2*p, l]
# identify the number of people with given assignments for S,A
S1 <- S[2*p-1, l]
S2 <- S[2*p, l]
same_S <- 0
same_G <- 0
#TODO: for loop = super inefficient, probably fix later
for (i in 1:(nrow(G)/2)){
single_G <- G[(2*i-1):(2*i),]
single_S <- S[(2*i-1):(2*i),]
if (single_S[1,l] == u & single_S[2,l] == v){
same_S <- same_S+1
if (single_G[1,l] == g1 & single_G[2,l] == g2){
same_G <- same_G+1
}
} else if (single_S[1,l] == v & single_S[2,l] == u){
same_S <- same_S+1
if (single_G[1,l] == g2 & single_G[2,l] == g1){
same_G <- same_G+1
}
}
}
if (same_S == 0){
return(0)
} else{
return(same_G/same_S)
}
}
A <- initA(dim(d)[1],dim(d)[2],1,1)
PA <- initPA(A)
Q <- t(initQ(dim(d)[1],dim(d)[2]))
T <- initT(dim(d)[2],1,1)
S <- initS(dim(d)[1],dim(d)[2],dim(genotypes)[1],Q,T)
C <- dim(d)[2]
L <- dim(genotypes)[2]
# Get H
# H <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H <- S
# Monte Carlo stuff
max_iter = 100
for (iter in 1:max_iter){
print(paste("iteration number",iter))
# Collapse haplotype count by locus
CA <- countHapByLocus(H,4,4)
GA <- countAlleleByLocus(genotypes)
# re-sample T and Q
T <- gibbs_T(4,T,1,1)
Q <- gibbs_Q(4,4,CA)
# update PA (equation 3.5 from thesis)
PA <- updatePA(genotypes,A,L,C,GA)
# sample A (using 4.5 from thesis)
A <- gibbs_A(C,L,1,1,PA,genotypes,S,A)
S_prime <- matrix(NA, nrow=dim(S)[1], ncol=dim(S)[2])
# sample S
for (p in 1:(dim(genotypes)[1]/2)){
for (l in 1:dim(genotypes)[2]){
p_vals <- matrix(nrow=0,ncol=3)
for (i in 1:C){
for (j in 1:C){
forward_prob = forward_S(i,j,l,p,genotypes,S,Q,A,C,T)
P_G_prob = P_G(p,l,i,j,genotypes,S,A)
backward_prob = backward_S(i,j,l,p,genotypes,S,Q,A,C,T)
# print(paste(forward_prob, P_G_prob, backward_prob))
p_vals <- rbind(p_vals, c(i,j, forward_prob * P_G_prob * backward_prob))
}
}
best_fit <- p_vals[which(p_vals[,3] == max(p_vals[,3])),]
S_prime[2*p-1, l] <- best_fit[1]
S_prime[2*p, l] <- best_fit[2]
}
}
S <- S_prime
# assign H' based on new values
# H_prime <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H_prime <- S
# if H' and H are the same, then the algorithm has converged
accuracy_p <- accuracy(H,genotypes,A)
print(accuracy_p)
if (matrix_converged(H_prime, H) & accuracy_p > 0.9){
H = H_prime
# print(iter)
break
}
H <- H_prime
}
initQ <- function(M,C,x=1,seed=5){
# Dirichlet(1,...,1) (length M)
# Sample for C ancesteral haplotypes
set.seed(seed)
return(rdirichlet(C,rep(1/C,M)))
}
# Gibbs update for Q
gibbs_Q <- function(M,C,CA,x=1,seed=5){
set.seed(seed)
Q <- matrix(NA,nrow=C,ncol=M)
for (i in 1:C){
Q[i,] <- rdirichlet(1,(1/C)+CA[i,])
}
return(Q)
}
initT <- function(M,a,b,seed=5){
# Beta-Bernoulli Conjugate -> beta(a+1,b)
# Success = No recombination
set.seed(seed)
return(rbeta(M,a+1,b))
}
# Gibbs update for T
gibbs_T <- function(M,T,a,b,seed=5){
set.seed(seed)
return(rbeta(M,a+T,b+M-T))
}
A <- initA(dim(d)[1],dim(d)[2],1,1)
PA <- initPA(A)
Q <- t(initQ(dim(d)[1],dim(d)[2]))
T <- initT(dim(d)[2],1,1)
S <- initS(dim(d)[1],dim(d)[2],dim(genotypes)[1],Q,T)
C <- dim(d)[2]
L <- dim(genotypes)[2]
# Get H
# H <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H <- S
# Monte Carlo stuff
max_iter = 100
for (iter in 1:max_iter){
print(paste("iteration number",iter))
# Collapse haplotype count by locus
CA <- countHapByLocus(H,4,4)
GA <- countAlleleByLocus(genotypes)
# re-sample T and Q
T <- gibbs_T(4,T,1,1)
Q <- gibbs_Q(4,4,CA)
# update PA (equation 3.5 from thesis)
PA <- updatePA(genotypes,A,L,C,GA)
# sample A (using 4.5 from thesis)
A <- gibbs_A(C,L,1,1,PA,genotypes,S,A)
S_prime <- matrix(NA, nrow=dim(S)[1], ncol=dim(S)[2])
# sample S
for (p in 1:(dim(genotypes)[1]/2)){
for (l in 1:dim(genotypes)[2]){
p_vals <- matrix(nrow=0,ncol=3)
for (i in 1:C){
for (j in 1:C){
forward_prob = forward_S(i,j,l,p,genotypes,S,Q,A,C,T)
P_G_prob = P_G(p,l,i,j,genotypes,S,A)
backward_prob = backward_S(i,j,l,p,genotypes,S,Q,A,C,T)
# print(paste(forward_prob, P_G_prob, backward_prob))
p_vals <- rbind(p_vals, c(i,j, forward_prob * P_G_prob * backward_prob))
}
}
best_fit <- p_vals[which(p_vals[,3] == max(p_vals[,3])),]
S_prime[2*p-1, l] <- best_fit[1]
S_prime[2*p, l] <- best_fit[2]
}
}
S <- S_prime
# assign H' based on new values
# H_prime <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H_prime <- S
# if H' and H are the same, then the algorithm has converged
accuracy_p <- accuracy(H,genotypes,A)
print(accuracy_p)
if (matrix_converged(H_prime, H) & accuracy_p > 0.9){
H = H_prime
# print(iter)
break
}
H <- H_prime
}
A <- initA(dim(d)[1],dim(d)[2],1,1)
PA <- initPA(A)
Q <- t(initQ(dim(d)[1],dim(d)[2]))
T <- initT(dim(d)[2],1,1)
S <- initS(dim(d)[1],dim(d)[2],dim(genotypes)[1],Q,T)
C <- dim(d)[2]
L <- dim(genotypes)[2]
# Get H
# H <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H <- S
# Monte Carlo stuff
max_iter = 100
for (iter in 1:max_iter){
print(paste("iteration number",iter))
# Collapse haplotype count by locus
CA <- countHapByLocus(H,4,4)
GA <- countAlleleByLocus(genotypes)
# re-sample T and Q
T <- gibbs_T(4,T,1,1)
Q <- t(gibbs_Q(4,4,CA))
# update PA (equation 3.5 from thesis)
PA <- updatePA(genotypes,A,L,C,GA)
# sample A (using 4.5 from thesis)
A <- gibbs_A(C,L,1,1,PA,genotypes,S,A)
S_prime <- matrix(NA, nrow=dim(S)[1], ncol=dim(S)[2])
# sample S
for (p in 1:(dim(genotypes)[1]/2)){
for (l in 1:dim(genotypes)[2]){
p_vals <- matrix(nrow=0,ncol=3)
for (i in 1:C){
for (j in 1:C){
forward_prob = forward_S(i,j,l,p,genotypes,S,Q,A,C,T)
P_G_prob = P_G(p,l,i,j,genotypes,S,A)
backward_prob = backward_S(i,j,l,p,genotypes,S,Q,A,C,T)
# print(paste(forward_prob, P_G_prob, backward_prob))
p_vals <- rbind(p_vals, c(i,j, forward_prob * P_G_prob * backward_prob))
}
}
best_fit <- p_vals[which(p_vals[,3] == max(p_vals[,3])),]
S_prime[2*p-1, l] <- best_fit[1]
S_prime[2*p, l] <- best_fit[2]
}
}
S <- S_prime
# assign H' based on new values
# H_prime <- assignH(genotypes,S,Q,A,dim(d)[1],T)
H_prime <- S
# if H' and H are the same, then the algorithm has converged
accuracy_p <- accuracy(H,genotypes,A)
print(accuracy_p)
if (matrix_converged(H_prime, H) & accuracy_p > 0.9){
H = H_prime
# print(iter)
break
}
H <- H_prime
}
?rpois
rpois(n=10000,lambda=36)
vars <- rpois(n=10000,lambda=36)
summary(vars)
mean(rpois)
mean(vars)
var(vars)
hist(vars)
hist(vars,main='Poisson Distribution (lambda=36, n=10000)',xlab='Sampled value')
rbinom(n=10000,size=1/(0.05),mu=36)
?rbinom
?rnbinom
rnbinom(n=10000,size=1/(0.05),mu=36)
vars <- rnbinom(n=10000,size=1/(0.05),mu=36)
mean(vars)
var(vars)
hist(vars)
hist(vars,main='Overdispersed Poisson Distribution (mu=36, size=1/(0.05), n=10000)',xlab='Sampled value')
36 + (0.05 *36^2)
100.142 / 35.7556
ddsHTSeq <- DESeq(ddsHTSeq)
ppois(20,15,lower.tail=FALSE)
ppois(89,15,lower.tail=FALSE)
ppois(27,15,lower.tail=FALSE)
ppois(13,15,lower.tail=FALSE)
ppois(112,15,lower.tail=FALSE)
ppois(18,15,lower.tail=FALSE)
load("/Users/bcrone/Documents/CLASS/Winter20/BIOINF545/Homework/HW4/Motif_data.Rdata")
View(ClinVarClassByPopulation)
load("/Users/bcrone/Documents/CLASS/Winter20/BIOINF545/Homework/HW4/Motif_data.Rdata")
hist(motif1)
hist(motif2)
motif1
motif1$motif.loc
motif1[,1]/motif1[,2]
hist(motif1[,1]/motif1[,2])
hist(motif2[,1]/motif2[,2])
hist(motif1[,1]/motif1[,2],main="Motif1 Peak Center",xlab="Relative Peak Center")
hist(motif2[,1]/motif2[,2],main="Motif2 Peak Center",xlab="Relative Peak Center")
setwd('/Users/bcrone/Documents/CLASS/Winter20/BIOINF545/Project/BIOINF545Project/samples')
